Acceptance Testing in Go


Ryan Faerman
Software Engineer, Ultimate Software
ryan_faerman@ultimatesoftware.com
08 September 2015

* This talk

Why do we test at all?

What are acceptance tests?

Why not use something like Ruby + RSpec?

How would an acceptance test in Go even look?

How can we make it better?

* Why do we test at all?

* Why do we test at all?

Let's paraphrase Uncle Bob:

  Bad code slows us down.

  The key to cleaning the [bad] code is to have a test suite that you trust with your life; because
  then you won't be afraid to clean the code.

  The tests enable the team to go fast and the system to stay healthy.

.caption An excerpt from [[http://blog.8thlight.com/uncle-bob/2013/09/23/Test-first.html][Test First]] by [[https://en.wikipedia.org/wiki/Robert_Cecil_Martin][Uncle Bob]]


* Testing is part of our code

Testing shouldn't be an after-thought.

Our craft is "computer science" not "computer magic".

A key tenent of science is repeatability -- an experiment should be able to be repeated and get the same results.

.image acceptance-tests/wizard.png 250 _
.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

* It's ultimately about confidence

You should never be afraid of your code.

Testing give us some level of confidence that our code working.

It enables us to say "This works now and in the future too! And I can prove it!"

* Different Strokes for Different Folks

- unit tests
- integration tests
- small, medium, large
- black-box/outside-in vs mocking
- acceptance tests

.image acceptance-tests/dizzy.png 200 _
.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]


* What are acceptance tests?

* According to Wikipedia

Acceptance Testing is:

"...formal testing with respect to user needs, requirements, and business processes conducted to determine whether or not a system satisfies the acceptance criteria and to enable the user, customers or other authorized entity to determine whether or not to accept the system..."

.caption https://en.wikipedia.org/wiki/Acceptance_testing

* In the real world

Acceptance testing is how we ensure our acceptance critera have been met.

In the agile development world, these would be user stories:

- As a user I should be able to...
- As a user I should not be able to...
- As a user, when I do *something*, I expect to...

* Acceptance tests are generally slow

- they test from the outside
- they go over an actual network connection
- run on real hardware
- talk to real collaborators

You probably won't be running these on every code change

* Why not use something like Ruby + RSpec?

* We already have a Rakefile, so let's use Ruby!

Ruby is a dynamic language that is designed for "developer happiness".

RSpec is a gem that provides a general testing framework that gives you:
- expectations & matchers
- mocks & stubbing
- lifecycle hooks (before, after, around)
- an entire DSL for testing

.image acceptance-tests/ruby-logo.png 150 _

* What does an RSpec test look like?

As a user, I should be able to visit "/health-check" and get a response with status code 200 and a body of "ok".

  describe 'healthcheck' do
    subject { HTTParty.get(TARGET_HOST+'/health-check') }

    it 'responds 200' do
      expect(subject.code).to be 200
    end

    it 'responds ok' do
      expect(subject.body.chomp).to eq 'ok'
    end
  end

.caption Cue the Ruby Magic!

* This is getting out of hand

    context 'that is valid' do
      [
        ['marge', 'GET'],
        ['homer', 'POST'],
        ['homer', 'PUT'],
        ['homer', 'DELETE'],
        ['burns', 'GET'],
        ['burns', 'POST'],
        ['burns', 'PUT'],
        ['burns', 'DELETE'],
      ].each do |example|
        user, method = example

        it "#{user} is authorized to #{method}" do
          login_response = login($seeder.username(user), $seeder.password)
          expect(login_response).to be_successful

          options = { headers: {'Authorization' => login_response.bearer_token} }
          response = HTTParty.send(method.downcase, File.join(TARGET_HOST, 'tenants'), options)
          expect(response.code).not_to eq 401
        end
      end
    end

* This is why we can't have nice things

Ever heard of meta-programming?
What about monkey-patching?
What about `method_missing` or `Object.send()`?

If you're a Rubyist, these things make sense *maybe*.

I actually like Ruby and RSpec, but it [[http://rubini.us/2014/12/31/matz-s-ruby-developers-don-t-use-rubyspec/][has no formal spec]].

* The road to hell is paved with good intentions

Let's remember -- testing is part of our code.

It *is* part our domain and it is *our* job.

We're gophers; we're used to prioritizing simplicity and clarity over magic.

* How would an acceptance test in Go even look?

* Let's port our RSpec test to Go!

As a user, I should be able to visit "/health-check" and get a response with status code 200 and a body of "ok".

.code acceptance-tests/mutt.go /^func TestItWorks/,/^}/

* Let's port our RSpec test to Go! (continued)

We have a quick helper function to act as a gate:

.code acceptance-tests/mutt.go /^func acceptanceTest/,/^}/

Running our tests:

  $ go test -short // skip acceptance tests

  $ TARGET_HOST=<example.com> go test

* It's all better with friends

We're already productive!

There's nothing extra to install or maintain.

We haven't given up much in the way of readability.

.image acceptance-tests/balloon.png 300 _
.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

* It's not all gophers and rainbows

These can get out of hand, just like with Ruby and RSpec.

But we already have the knowledge and experience on preventing that - we're gophers!

The same techniques we use every day to keep our code concise and our functions clear, we can use leverage here.

* How can we make this better?

* So Many Tabs!

You need to have the built application running somewhere

If you're testing locally, this means another window or tab and it's easy to forget to rebuild the application.

If you're running in CI, this means you'll need to standup an instance someplace that needs to be torn down afterwards.

.image acceptance-tests/confused.png 250 _
.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

* What if...

In an ideal acceptance testing world, our application would be:

- built for us, on demand
- cleaned up, as needed
- tested the same locally, as remotely (in ci)

Provided we follow the tenents of the [[http://12factor.net/config][12 Factor App section for config]] we actually can enable all of this.

* A Quick 12 Factor Config Refresher

.image acceptance-tests/12factor-config.png 350 _
.caption Excerpt from [[http://12factor.net][12 Factor App]]

* Our test hasn't really changed

.code acceptance-tests/acceptance/acceptance_test.go /^func TestItWorks/,/^}/

* What has changed, is everything else

.code acceptance-tests/acceptance/acceptance_test.go /^func TestMain/,/^}/

* What has changed, is everything else (continued)

.image acceptance-tests/acceptance-running.gif 350 _

We actually build, run, wait for the app to start, test, and then shutdown the application.

On demand.

* It's not just for our app

We can run all of our backing services in docker

Checkout [[http://developers.almamedia.fi/painless-mongodb-testing-with-docker-and-golang/][Painless MongoDB Testing with Docker and Golang]] for details to run MongoDB in container on demand.

The compilation trick was inspired by this post.

* Let's dive in just a little bit

There are four main functions that power this whole thing:

    func build() error
    func run() (*os.Process, error)
    func waitForReachable(timeout time.Duration) error
    func kill(p *os.Process)

* First, we build it

We shell out to `go` `build` and block until compilation completes.

.code acceptance-tests/acceptance/acceptance_test.go /^func build()/,/^}/

* Second, we run it

We shell out to run out application as a child process.

.code acceptance-tests/acceptance/acceptance_test.go /^func run()/,/^}/

* Third, we wait

The `netutil` package gives most of this to us.

.code acceptance-tests/acceptance/acceptance_test.go /^func waitForReachable/,/^}/
.caption go get camlistore.org/pkg/netutil

* Finally, we kill it all

We clean up after ourselves like good gophers should!

.code acceptance-tests/acceptance/acceptance_test.go /^func kill/,/^}/

* What have we learned?

* What have we learned?

We practice computer science, not computer art.

Testing is part of our domain.

We don't need to use yet another language for our acceptance tests.
Fewer languages means fewer context switches.

We can use go to resolve some of the difficulties of acceptance tests.
We can auto-build our code and even run our collaborators in the background.

With a little work our tests can be as readable as Ruby + RSpec.

